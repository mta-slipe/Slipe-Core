System.define("SlipeLua.MtaDefinitions.MtaElement", {

})
System.define("SlipeLua.MtaDefinitions.MtaAccount", {
	
})
System.define("SlipeLua.MtaDefinitions.MtaTimer", {
	
})
System.define("SlipeLua.MtaDefinitions.MtaAcl", {
	
})
System.define("SlipeLua.MtaDefinitions.MtaAclGroup", {
	
})
System.define("SlipeLua.MtaDefinitions.MtaBan", {
	
})
System.define("SlipeLua.MtaDefinitions.MtaResource", {
	
})

System.define("SlipeLua.MtaDefinitions.MtaShared", {
	GetBlipVisibleDistance = function(...) local results = {getBlipVisibleDistance(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetBlipColor = function(...) return System.tuple(getBlipColor(...)) end,
	GetBlipOrdering = function(...) local results = {getBlipOrdering(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetBlipIcon = function(...) local results = {getBlipIcon(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetBlipSize = function(...) local results = {getBlipSize(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	SetBlipIcon = setBlipIcon,
	SetBlipSize = setBlipSize,
	SetBlipColor = setBlipColor,
	GetClothesByTypeIndex = function(...) return System.tuple(getClothesByTypeIndex(...)) end,
	SetBlipOrdering = setBlipOrdering,
	GetClothesTypeName = function(...) local results = {getClothesTypeName(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetBodyPartName = function(...) local results = {getBodyPartName(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	SetBlipVisibleDistance = setBlipVisibleDistance,
	GetTypeIndexFromClothes = function(...) return System.tuple(getTypeIndexFromClothes(...)) end,
	CreateColCircle = function(...) local results = {createColCircle(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	CreateColRectangle = function(...) local results = {createColRectangle(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	CreateColCuboid = function(...) local results = {createColCuboid(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetColShapeType = function(...) local results = {getColShapeType(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetElementColShape = function(...) local results = {getElementColShape(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	CreateColTube = function(...) local results = {createColTube(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetElementsWithinColShape = function(...) local results = {getElementsWithinColShape(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	CreateColSphere = function(...) local results = {createColSphere(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	IsElementWithinColShape = isElementWithinColShape,
	IsInsideColShape = isInsideColShape,
	AttachElements = attachElements,
	CreateColPolygon = function(...) local results = {createColPolygon(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetAttachedElements = function(...) local results = {getAttachedElements(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetElementAlpha = function(...) local results = {getElementAlpha(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	DestroyElement = destroyElement,
	GetElementAttachedOffsets = function(...) return System.tuple(getElementAttachedOffsets(...)) end,
	DetachElements = detachElements,
	GetElementByID = function(...) local results = {getElementByID(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetElementCollisionsEnabled = getElementCollisionsEnabled,
	CreateElement = function(...) local results = {createElement(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetElementAttachedTo = function(...) local results = {getElementAttachedTo(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetElementChild = function(...) local results = {getElementChild(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetElementChildrenCount = function(...) local results = {getElementChildrenCount(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetElementChildren = function(...) local results = {getElementChildren(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetElementDimension = function(...) local results = {getElementDimension(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetElementID = function(...) local results = {getElementID(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetElementData = function(...) local results = {getElementData(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetElementInterior = function(...) local results = {getElementInterior(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetElementParent = function(...) local results = {getElementParent(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetElementPosition = function(...) return System.tuple(getElementPosition(...)) end,
	GetElementHealth = function(...) local results = {getElementHealth(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetElementModel = function(...) local results = {getElementModel(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetElementRotation = function(...) return System.tuple(getElementRotation(...)) end,
	GetElementMatrix = function(...) local results = {getElementMatrix(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetElementType = function(...) local results = {getElementType(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetElementVelocity = function(...) return System.tuple(getElementVelocity(...)) end,
	GetLowLODElement = function(...) local results = {getLowLODElement(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	IsElementAttached = isElementAttached,
	IsElementCallPropagationEnabled = isElementCallPropagationEnabled,
	IsElement = isElement,
	GetRootElement = function(...) local results = {getRootElement(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	IsElementDoubleSided = isElementDoubleSided,
	IsElementFrozen = isElementFrozen,
	IsElementInWater = isElementInWater,
	IsElementWithinMarker = isElementWithinMarker,
	IsElementLowLOD = isElementLowLOD,
	SetElementAngularVelocity = setElementAngularVelocity,
	SetElementAttachedOffsets = setElementAttachedOffsets,
	SetElementDoubleSided = setElementDoubleSided,
	SetElementFrozen = setElementFrozen,
	SetElementCallPropagationEnabled = setElementCallPropagationEnabled,
	GetElementAngularVelocity = getElementAngularVelocity,
	SetElementHealth = setElementHealth,
	SetElementID = setElementID,
	SetElementCollisionsEnabled = setElementCollisionsEnabled,
	SetElementData = setElementData,
	SetElementAlpha = setElementAlpha,
	SetElementDimension = setElementDimension,
	SetElementModel = setElementModel,
	SetElementVelocity = setElementVelocity,
	SetLowLODElement = setLowLODElement,
	SetElementRotation = setElementRotation,
	SetElementPosition = setElementPosition,
	SetElementInterior = setElementInterior,
	GetEventHandlers = function(...) local results = {getEventHandlers(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	AddEvent = addEvent,
	AddEventHandler = function(event, src, handlerName, propagate, priorty) local splits = split(handlerName, ".") local result = _G for _, split in ipairs(splits) do result = result[split] end addEventHandler(event, src, function(...) result(event, client or source, ...) end, propagate, priorty) end,
	SetElementParent = setElementParent,
	TriggerEvent = triggerEvent,
	FileDelete = fileDelete,
	WasEventCancelled = wasEventCancelled,
	FileFlush = fileFlush,
	FileGetPath = function(...) local results = {fileGetPath(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	FileCopy = fileCopy,
	FileClose = fileClose,
	FileExists = fileExists,
	FileCreate = function(...) local results = {fileCreate(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	FileIsEOF = fileIsEOF,
	FileGetPos = function(...) local results = {fileGetPos(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	RemoveEventHandler = removeEventHandler,
	FileRead = function(...) local results = {fileRead(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	FileGetSize = function(...) local results = {fileGetSize(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	HttpClear = httpClear,
	FileRename = fileRename,
	FileSetPos = function(...) local results = {fileSetPos(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	HttpSetResponseHeader = httpSetResponseHeader,
	HttpWrite = httpWrite,
	HttpRequestLogin = httpRequestLogin,
	HttpSetResponseCode = httpSetResponseCode,
	FileOpen = function(...) local results = {fileOpen(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	FileWrite = function(...) local results = {fileWrite(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	HttpSetResponseCookie = httpSetResponseCookie,
	GetCommandHandlers = function(...) local results = {getCommandHandlers(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	RemoveCommandHandler = removeCommandHandler,
	-- Removed because of deprecation
	-- SetControlState = setControlState,
	GetMarkerCount = function(...) local results = {getMarkerCount(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetMarkerColor = function(...) return System.tuple(getMarkerColor(...)) end,
	GetMarkerIcon = function(...) local results = {getMarkerIcon(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetMarkerTarget = function(...) return System.tuple(getMarkerTarget(...)) end,
	SetMarkerIcon = setMarkerIcon,
	GetMarkerType = function(...) local results = {getMarkerType(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	SetMarkerColor = setMarkerColor,
	GetMarkerSize = function(...) local results = {getMarkerSize(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	SetMarkerType = setMarkerType,
	SetMarkerSize = setMarkerSize,
	SetMarkerTarget = setMarkerTarget,
	CreateObject = function(...) local results = {createObject(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetObjectScale = function(...) return System.tuple(getObjectScale(...)) end,
	StopObject = stopObject,
	MoveObject = moveObject,
	SetObjectScale = setObjectScale,
	OutputDebugString = outputDebugString,
	GetPedOccupiedVehicle = function(...) local results = {getPedOccupiedVehicle(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetPedContactElement = function(...) local results = {getPedContactElement(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetPedClothes = function(...) return System.tuple(getPedClothes(...)) end,
	AddPedClothes = addPedClothes,
	GetPedArmor = function(...) local results = {getPedArmor(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetPedFightingStyle = function(...) local results = {getPedFightingStyle(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetPedAmmoInClip = function(...) local results = {getPedAmmoInClip(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetPedOccupiedVehicleSeat = function(...) local results = {getPedOccupiedVehicleSeat(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetPedWeaponSlot = function(...) local results = {getPedWeaponSlot(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetPedTarget = function(...) local results = {getPedTarget(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetPedTotalAmmo = function(...) local results = {getPedTotalAmmo(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetPedWalkingStyle = function(...) local results = {getPedWalkingStyle(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetPedStat = function(...) local results = {getPedStat(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetPedWeapon = function(...) local results = {getPedWeapon(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetValidPedModels = function(...) local results = {getValidPedModels(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	IsPedDead = isPedDead,
	IsPedChoking = isPedChoking,
	IsPedDoingGangDriveby = isPedDoingGangDriveby,
	IsPedDucked = isPedDucked,
	IsPedHeadless = isPedHeadless,
	IsPedOnFire = isPedOnFire,
	IsPedOnGround = isPedOnGround,
	IsPedWearingJetpack = isPedWearingJetpack,
	IsPedInVehicle = isPedInVehicle,
	RemovePedFromVehicle = removePedFromVehicle,
	KillPed = killPed,
	RemovePedClothes = removePedClothes,
	SetPedAnimation = setPedAnimation,
	SetPedAnimationProgress = setPedAnimationProgress,
	SetPedAnimationSpeed = setPedAnimationSpeed,
	SetPedHeadless = setPedHeadless,
	SetPedDoingGangDriveby = setPedDoingGangDriveby,
	SetPedOnFire = setPedOnFire,
	SetPedStat = setPedStat,
	SetPedWeaponSlot = setPedWeaponSlot,
	SetPedWalkingStyle = setPedWalkingStyle,
	WarpPedIntoVehicle = warpPedIntoVehicle,
	GetPickupAmmo = function(...) local results = {getPickupAmmo(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetPickupWeapon = function(...) local results = {getPickupWeapon(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetPickupAmount = function(...) local results = {getPickupAmount(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	CreatePickup = function(...) local results = {createPickup(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetPickupType = function(...) local results = {getPickupType(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	UsePickup = usePickup,
	SetPickupType = setPickupType,
	GetPlayerFromName = function(...) local results = {getPlayerFromName(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetPlayerName = function(...) local results = {getPlayerName(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetPlayerNametagColor = function(...) return System.tuple(getPlayerNametagColor(...)) end,
	GetPlayerNametagText = function(...) local results = {getPlayerNametagText(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetPlayerTeam = function(...) local results = {getPlayerTeam(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	IsPlayerNametagShowing = isPlayerNametagShowing,
	GetPlayerPing = function(...) local results = {getPlayerPing(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	IsVoiceEnabled = isVoiceEnabled,
	SetPlayerNametagShowing = setPlayerNametagShowing,
	SetPlayerNametagText = setPlayerNametagText,
	SetPlayerNametagColor = setPlayerNametagColor,
	CreateRadarArea = function(...) local results = {createRadarArea(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	IsRadarAreaFlashing = isRadarAreaFlashing,
	GetRadarAreaColor = function(...) return System.tuple(getRadarAreaColor(...)) end,
	GetRadarAreaSize = function(...) return System.tuple(getRadarAreaSize(...)) end,
	SetRadarAreaSize = setRadarAreaSize,
	SetRadarAreaColor = setRadarAreaColor,
	SetRadarAreaFlashing = setRadarAreaFlashing,
	IsInsideRadarArea = isInsideRadarArea,
	Call = function(...) local results = {call(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetResourceDynamicElementRoot = function(...) local results = {getResourceDynamicElementRoot(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	FetchRemote = fetchRemote,
	GetResourceExportedFunctions = function(...) local results = {getResourceExportedFunctions(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetResourceConfig = function(...) local results = {getResourceConfig(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetResourceFromName = function(...) local results = {getResourceFromName(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetResourceState = function(...) local results = {getResourceState(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetResourceName = function(...) local results = {getResourceName(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetResourceRootElement = function(...) local results = {getResourceRootElement(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetThisResource = function(...) local results = {getThisResource(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetFPSLimit = function(...) local results = {getFPSLimit(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetVersion = function(...) local results = {getVersion(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	SetFPSLimit = setFPSLimit,
	GetTeamName = function(...) local results = {getTeamName(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetTeamFriendlyFire = getTeamFriendlyFire,
	CountPlayersInTeam = function(...) local results = {countPlayersInTeam(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetTeamFromName = function(...) local results = {getTeamFromName(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetPlayersInTeam = function(...) local results = {getPlayersInTeam(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetTeamColor = function(...) return System.tuple(getTeamColor(...)) end,
	BitNot = function(...) local results = {bitNot(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	BitAnd = function(...) local results = {bitAnd(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	Base64Encode = function(...) local results = {base64Encode(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	Base64Decode = function(...) local results = {base64Decode(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	AddDebugHook = addDebugHook,
	BitXor = function(...) local results = {bitXor(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	BitTest = bitTest,
	BitOr = function(...) local results = {bitOr(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	BitLRotate = function(...) local results = {bitLRotate(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	BitRRotate = function(...) local results = {bitRRotate(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	BitLShift = function(...) local results = {bitLShift(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	BitArShift = function(...) local results = {bitArShift(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	BitReplace = function(...) local results = {bitReplace(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	BitRShift = function(...) local results = {bitRShift(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	BitExtract = function(...) local results = {bitExtract(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	EncodeString = function(...) local results = {encodeString(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	DecodeString = function(...) local results = {decodeString(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetDistanceBetweenPoints2D = function(...) local results = {getDistanceBetweenPoints2D(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetColorFromString = function(...) return System.tuple(getColorFromString(...)) end,
	FromJSON = function(...) local results = {fromJSON(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	DebugSleep = debugSleep,
	GetDevelopmentMode = getDevelopmentMode,
	GetEasingValue = function(...) local results = {getEasingValue(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetDistanceBetweenPoints3D = function(...) local results = {getDistanceBetweenPoints3D(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetNetworkUsageData = function(...) local results = {getNetworkUsageData(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetPerformanceStats = function(...) return System.tuple(getPerformanceStats(...)) end,
	GetRealTime = function(...) local results = {getRealTime(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetTickCount = function(...) local results = {getTickCount(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetUserdataType = function(...) local results = {getUserdataType(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetTimerDetails = function(...) return System.tuple(getTimerDetails(...)) end,
	Gettok = function(...) local results = {gettok(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	Hash = function(...) local results = {hash(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	Iprint = iprint,
	IsOOPEnabled = isOOPEnabled,
	GetTimers = function(...) local results = {getTimers(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	Inspect = function(...) local results = {inspect(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	IsTimer = isTimer,
	KillTimer = killTimer,
	PasswordHash = function(...) local results = {passwordHash(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	PasswordVerify = passwordVerify,
	Md5 = function(...) local results = {md5(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	InterpolateBetween = function(...) return System.tuple(interpolateBetween(...)) end,
	PregFind = pregFind,
	ResetTimer = resetTimer,
	PregReplace = function(...) local results = {pregReplace(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	RemoveDebugHook = removeDebugHook,
	PregMatch = function(...) local results = {pregMatch(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	TeaDecode = function(...) local results = {teaDecode(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	SetDevelopmentMode = setDevelopmentMode,
	ToJSON = function(...) local results = {toJSON(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	SetTimer = function(...) local results = {setTimer(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	UtfChar = function(...) local results = {utfChar(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	UtfCode = function(...) local results = {utfCode(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	Split = function(...) local results = {split(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	UtfLen = function(...) local results = {utfLen(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	Tocolor = function(...) local results = {tocolor(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	UtfSub = function(...) local results = {utfSub(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	Utf8_escape = function(...) local results = {utf8.escape(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	Sha256 = function(...) local results = {sha256(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	Utf8_char = function(...) local results = {utf8.char(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	TeaEncode = function(...) local results = {teaEncode(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	UtfSeek = function(...) local results = {utfSeek(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	Utf8_find = function(...) local results = {utf8.find(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	Utf8_match = function(...) local results = {utf8.match(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	Utf8_gmatch = function(...) local results = {utf8.gmatch(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	Utf8_charpos = function(...) return System.tuple(utf8.charpos(...)) end,
	Utf8_byte = function(...) local results = {utf8.byte(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	Utf8_ncasecmp = function(...) local results = {utf8.ncasecmp(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	Utf8_fold = function(...) local results = {utf8.fold(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	Utf8_gsub = function(...) local results = {utf8.gsub(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	Utf8_len = function(...) local results = {utf8.len(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	Utf8_insert = function(...) local results = {utf8.insert(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	Utf8_next = function(...) return System.tuple(utf8.next(...)) end,
	Utf8_reverse = function(...) local results = {utf8.reverse(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	Utf8_remove = function(...) local results = {utf8.remove(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	Utf8_title = function(...) local results = {utf8.title(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	Utf8_width = function(...) local results = {utf8.width(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	Utf8_sub = function(...) local results = {utf8.sub(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	AttachTrailerToVehicle = attachTrailerToVehicle,
	Utf8_widthindex = function(...) return System.tuple(utf8.widthindex(...)) end,
	AddVehicleUpgrade = addVehicleUpgrade,
	GetTrainPosition = function(...) local results = {getTrainPosition(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	FixVehicle = fixVehicle,
	DetachTrailerFromVehicle = detachTrailerFromVehicle,
	GetTrainDirection = getTrainDirection,
	GetTrainSpeed = function(...) local results = {getTrainSpeed(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetTrainTrack = function(...) local results = {getTrainTrack(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetOriginalHandling = function(...) local results = {getOriginalHandling(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetVehicleController = function(...) local results = {getVehicleController(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetVehicleEngineState = getVehicleEngineState,
	GetVehicleHeadLightColor = function(...) return System.tuple(getVehicleHeadLightColor(...)) end,
	GetVehicleDoorState = function(...) local results = {getVehicleDoorState(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetVehicleDoorOpenRatio = function(...) local results = {getVehicleDoorOpenRatio(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetVehicleColor = function(...) return System.tuple(getVehicleColor(...)) end,
	GetVehicleName = function(...) local results = {getVehicleName(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetVehicleNameFromModel = function(...) local results = {getVehicleNameFromModel(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetVehicleCompatibleUpgrades = function(...) local results = {getVehicleCompatibleUpgrades(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetVehicleLandingGearDown = getVehicleLandingGearDown,
	GetVehicleModelFromName = function(...) local results = {getVehicleModelFromName(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetVehicleLightState = function(...) local results = {getVehicleLightState(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetVehicleHandling = function(...) local results = {getVehicleHandling(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetVehiclePaintjob = function(...) local results = {getVehiclePaintjob(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetVehicleOccupant = function(...) local results = {getVehicleOccupant(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetVehicleOverrideLights = function(...) local results = {getVehicleOverrideLights(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetVehicleMaxPassengers = function(...) local results = {getVehicleMaxPassengers(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetVehiclePanelState = function(...) local results = {getVehiclePanelState(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetVehicleSirensOn = getVehicleSirensOn,
	GetVehicleOccupants = function(...) local results = {getVehicleOccupants(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetVehicleSirenParams = function(...) local results = {getVehicleSirenParams(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetVehiclePlateText = function(...) local results = {getVehiclePlateText(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetVehicleTowedByVehicle = function(...) local results = {getVehicleTowedByVehicle(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetVehicleSirens = function(...) local results = {getVehicleSirens(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetVehicleUpgradeSlotName = function(...) local results = {getVehicleUpgradeSlotName(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetVehicleVariant = function(...) return System.tuple(getVehicleVariant(...)) end,
	IsVehicleFuelTankExplodable = isVehicleFuelTankExplodable,
	GetVehicleTurretPosition = function(...) return System.tuple(getVehicleTurretPosition(...)) end,
	GetVehicleType = function(...) local results = {getVehicleType(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetVehicleTowingVehicle = function(...) local results = {getVehicleTowingVehicle(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	IsTrainDerailable = isTrainDerailable,
	GetVehicleUpgrades = function(...) local results = {getVehicleUpgrades(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetVehicleUpgradeOnSlot = function(...) local results = {getVehicleUpgradeOnSlot(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	IsVehicleDamageProof = isVehicleDamageProof,
	IsTrainDerailed = isTrainDerailed,
	IsVehicleBlown = isVehicleBlown,
	GetVehicleWheelStates = function(...) return System.tuple(getVehicleWheelStates(...)) end,
	RemoveVehicleUpgrade = removeVehicleUpgrade,
	SetTrainDerailable = setTrainDerailable,
	IsVehicleTaxiLightOn = isVehicleTaxiLightOn,
	SetTrainDirection = setTrainDirection,
	IsVehicleOnGround = isVehicleOnGround,
	IsVehicleLocked = isVehicleLocked,
	SetTrainSpeed = setTrainSpeed,
	SetTrainDerailed = setTrainDerailed,
	SetVehicleHeadLightColor = setVehicleHeadLightColor,
	SetVehicleDoorOpenRatio = setVehicleDoorOpenRatio,
	SetVehicleColor = setVehicleColor,
	SetTrainPosition = setTrainPosition,
	SetTrainTrack = setTrainTrack,
	SetVehicleDoorsUndamageable = setVehicleDoorsUndamageable,
	SetVehicleFuelTankExplodable = setVehicleFuelTankExplodable,
	SetVehicleDoorState = setVehicleDoorState,
	SetVehicleEngineState = setVehicleEngineState,
	SetVehicleLandingGearDown = setVehicleLandingGearDown,
	ResetWaterLevel = resetWaterLevel,
	SetVehicleLocked = setVehicleLocked,
	SetVehiclePaintjob = setVehiclePaintjob,
	GetWaterColor = function(...) return System.tuple(getWaterColor(...)) end,
	ResetWaterColor = resetWaterColor,
	SetVehicleTurretPosition = setVehicleTurretPosition,
	GetWaveHeight = function(...) local results = {getWaveHeight(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	SetVehicleLightState = setVehicleLightState,
	SetVehicleHandling = setVehicleHandling,
	GetSlotFromWeapon = function(...) local results = {getSlotFromWeapon(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetWaterVertexPosition = function(...) return System.tuple(getWaterVertexPosition(...)) end,
	SetVehicleTaxiLightOn = setVehicleTaxiLightOn,
	SetWaterColor = setWaterColor,
	SetVehiclePlateText = setVehiclePlateText,
	CreateWater = function(...) local results = {createWater(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	SetVehiclePanelState = setVehiclePanelState,
	GetWeaponIDFromName = function(...) local results = {getWeaponIDFromName(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	SetVehicleWheelStates = setVehicleWheelStates,
	GetGravity = function(...) local results = {getGravity(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetRainLevel = function(...) local results = {getRainLevel(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	SetVehicleSirens = setVehicleSirens,
	GetWeaponNameFromID = function(...) local results = {getWeaponNameFromID(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	SetVehicleSirensOn = setVehicleSirensOn,
	SetWaterVertexPosition = setWaterVertexPosition,
	IsGarageOpen = isGarageOpen,
	GetHeatHaze = function(...) 
 local args = {getHeatHaze(...)}
 local primaryArguments = {}
 local secondaryArguments = {}

 for i = 1, 7 do
 primaryArguments[i] = args[i]
 end
 for i = 8, #args do
 secondaryArguments[i + 7] = args[i]
 end
 local secondaryTuple = System.Tuple(unpack(secondaryArguments))
 primaryArguments[8] = secondaryTuple
 
 return System.Tuple(unpack(primaryArguments))
end,
	GetOcclusionsEnabled = getOcclusionsEnabled,
	GetJetpackMaxHeight = function(...) local results = {getJetpackMaxHeight(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetOriginalWeaponProperty = function(...) local results = {getOriginalWeaponProperty(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetSkyGradient = function(...) return System.tuple(getSkyGradient(...)) end,
	SetWaterLevel = setWaterLevel,
	SetWeaponAmmo = setWeaponAmmo,
	GetTrafficLightState = function(...) local results = {getTrafficLightState(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetGameSpeed = function(...) local results = {getGameSpeed(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetMinuteDuration = function(...) local results = {getMinuteDuration(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetWeather = function(...) return System.tuple(getWeather(...)) end,
	ResetSunColor = resetSunColor,
	GetSunSize = function(...) local results = {getSunSize(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	SetWaveHeight = setWaveHeight,
	GetWeaponProperty = function(...) local results = {getWeaponProperty(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetFogDistance = function(...) local results = {getFogDistance(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetTime = function(...) return System.tuple(getTime(...)) end,
	GetWindVelocity = function(...) return System.tuple(getWindVelocity(...)) end,
	GetMoonSize = function(...) local results = {getMoonSize(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetSunColor = function(...) return System.tuple(getSunColor(...)) end,
	SetVehicleDamageProof = setVehicleDamageProof,
	RemoveWorldModel = removeWorldModel,
	ResetSunSize = resetSunSize,
	SetMinuteDuration = setMinuteDuration,
	SetCloudsEnabled = setCloudsEnabled,
	SetAircraftMaxVelocity = setAircraftMaxVelocity,
	SetFogDistance = setFogDistance,
	RestoreWorldModel = restoreWorldModel,
	SetTrafficLightsLocked = setTrafficLightsLocked,
	ResetFogDistance = resetFogDistance,
	SetInteriorSoundsEnabled = setInteriorSoundsEnabled,
	ResetFarClipDistance = resetFarClipDistance,
	ResetHeatHaze = resetHeatHaze,
	SetGameSpeed = setGameSpeed,
	ResetWindVelocity = resetWindVelocity,
	SetGarageOpen = setGarageOpen,
	SetWeatherBlended = setWeatherBlended,
	ResetSkyGradient = resetSkyGradient,
	ResetRainLevel = resetRainLevel,
	SetGravity = setGravity,
	GetZoneName = function(...) local results = {getZoneName(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	SetHeatHaze = setHeatHaze,
	ResetMoonSize = resetMoonSize,
	SetSkyGradient = setSkyGradient,
	SetWeather = setWeather,
	XmlNodeGetAttribute = function(...) local results = {xmlNodeGetAttribute(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	SetOcclusionsEnabled = setOcclusionsEnabled,
	SetRainLevel = setRainLevel,
	SetFarClipDistance = setFarClipDistance,
	SetTrafficLightState = setTrafficLightState,
	SetTime = setTime,
	RestoreAllWorldModels = restoreAllWorldModels,
	XmlDestroyNode = xmlDestroyNode,
	XmlLoadFile = function(...) local results = {xmlLoadFile(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	SetWindVelocity = setWindVelocity,
	SetVehicleOverrideLights = setVehicleOverrideLights,
	SetMoonSize = setMoonSize,
	XmlSaveFile = xmlSaveFile,
	GetAircraftMaxVelocity = function(...) local results = {getAircraftMaxVelocity(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	XmlCreateChild = function(...) local results = {xmlCreateChild(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	XmlNodeGetValue = function(...) local results = {xmlNodeGetValue(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	SetSunSize = setSunSize,
	XmlNodeGetAttributes = function(...) local results = {xmlNodeGetAttributes(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	XmlNodeGetChildren = function(...) local results = {xmlNodeGetChildren(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	XmlNodeGetName = function(...) local results = {xmlNodeGetName(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	XmlFindChild = function(...) local results = {xmlFindChild(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	GetFarClipDistance = function(...) local results = {getFarClipDistance(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	XmlUnloadFile = xmlUnloadFile,
	XmlCreateFile = function(...) local results = {xmlCreateFile(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	XmlNodeSetAttribute = xmlNodeSetAttribute,
	XmlNodeGetParent = function(...) local results = {xmlNodeGetParent(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	XmlNodeSetValue = xmlNodeSetValue,
	XmlNodeSetName = xmlNodeSetName,
	AreTrafficLightsLocked = areTrafficLightsLocked,
	GetCloudsEnabled = getCloudsEnabled,
	XmlCopyFile = function(...) local results = {xmlCopyFile(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	SetWeaponProperty = setWeaponProperty,
	SetSunColor = setSunColor,
	GetElementsWithinRange = function(...) local results = {getElementsWithinRange(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	SetVehicleDirtLevel = setVehicleDirtLevel,
	GetAircraftMaxHeight = function(...) local results = {getAircraftMaxHeight(...)} if results[1] == false then System.throw(Slipe.MtaDefinitions.MtaException()) return end return unpack(results) end,
	SetJetpackMaxHeight = setJetpackMaxHeight,
	SetAircraftMaxHeight = setAircraftMaxHeight,
	GetListFromTable = function(table, listType) return System.listFromTable(table, listType) end,
	GetArrayFromTable = function(table, arrayType) return System.arrayFromTable(table, arrayType) end,
	GetDictionaryFromTable = function(table, tKey, tValue) return System.dictionaryFromTable(table, tKey, tValue) end,
	GetDateTimeFromSecondStamp = function(seconds) 
		local ts = getRealTime(seconds)
		return System.DateTime(ts.year + 1900, ts.month + 1, ts.monthday, ts.hour, ts.minute, ts.second)
	end,
})
System.define("SlipeLua.MtaDefinitions.MtaException", {
  __tostring = function()
	return "";
  end,
  __inherits__ = { System.Exception },

  __ctor__ = function(this, message, innerException)
	this.message = "MTA Has thrown an exception"
	this.innerException = innerException
  end
})
System.define("SlipeLua.MtaDefinitions.MtaPasswords", {
	Hash = function(input, cost)
		local options = {}
		options.cost = cost
		local task, callback = System.Task.Callback(function(...) return ... end)
		passwordHash(input, "bcrypt", options, callback)
		return task
	end,
	Verify = function(input, hash)
		local task, callback = System.Task.Callback(function(...) return ... end)
		passwordVerify(input, hash, {}, callback)
		return task
	end
})