-- Generated by CSharp.lua Compiler
local System = System
local SlipeMtaDefinitions
local SlipeShared
local ArrayObject
local DictStringObject

System.import(function (out)
  SlipeMtaDefinitions = Slipe.MtaDefinitions
  SlipeShared = Slipe.Shared
  ArrayObject = System.Array(System.Object)
  DictStringObject = System.Dictionary(System.String, System.Object)
end)


local MtaJson = {}

MtaJson.Serialize = function (value, compact, prettyType)
	local json = SlipeMtaDefinitions.MtaShared.ToJSON(value, compact, prettyType:ToEnumString(Slipe.Json.JsonPrettyType):ToLower())

	-- strip MTA's enclosing `[]`
	return json:Substring(1, #json - 2)
end

local function castParsedJson(value)
	local t = type(value)
	if t == "string" then
		return System.cast(System.String, value)
	elseif t == "number" then
		if math.floor(value) == value then
			return System.cast(System.Int32, value)
		else
			return System.cast(System.Single, value)
		end
	elseif t == "boolean" then
		return System.cast(System.Boolean, value)
	elseif t == "table" then
		
		local arrayLike = true
		for key, jsonValue in pairs(value) do
			value[key] = castParsedJson(jsonValue)
			if (type(key) ~= "number") then
				arrayLike = false
			end
		end

		if arrayLike then
			return SlipeMtaDefinitions.MtaShared.GetArrayFromTable(value, "System.Object")
		else
			return SlipeMtaDefinitions.MtaShared.GetDictionaryFromTable(value, "System.String", "System.Object")
		end
	end
end

MtaJson.Deserialize = function (json, T)
	local value = System.cast(T, SlipeMtaDefinitions.MtaShared.FromJSON(json))

	for key, jsonValue in pairs(value) do
		value[key] = castParsedJson(jsonValue)
	end

	return value
end

System.define("SlipeLua.Json.Json", MtaJson)
System.defEnum("Slipe.Json.JsonPrettyType", {
	None = 0,
	Spaces = 1,
	Tabs = 2
})